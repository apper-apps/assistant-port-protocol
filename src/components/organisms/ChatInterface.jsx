import { useState, useEffect, useRef } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { toast } from "react-toastify";
import ApperIcon from "@/components/ApperIcon";
import Avatar from "@/components/atoms/Avatar";
import MessageInput from "@/components/molecules/MessageInput";
import Loading from "@/components/ui/Loading";
import Error from "@/components/ui/Error";
import Empty from "@/components/ui/Empty";
import { conversationService } from "@/services/api/conversationService";
import { format } from "date-fns";
import { ru } from "date-fns/locale";

const ChatInterface = ({ 
  conversationId, 
  currentMode,
  onModeChange,
  onTitleUpdate,
  className = "" 
}) => {
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const loadConversation = async () => {
    if (!conversationId) {
      setMessages([]);
      return;
    }

    try {
      setLoading(true);
      setError("");
      const conversation = await conversationService.getById(conversationId);
      if (conversation) {
        setMessages(conversation.messages || []);
      }
    } catch (err) {
      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∏–∞–ª–æ–≥");
      toast.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadConversation();
  }, [conversationId]);

  const generateAIResponse = async (userMessage) => {
    const responses = {
      general: [
        "–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —ç—Ç–∏–º...",
        "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞. –í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É...",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø —Ä–∞–¥ –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º.",
        "–•–æ—Ä–æ—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –ü–æ–∑–≤–æ–ª—å—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏...",
      ],
      coding: [
        "```python\n# –í–æ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç:\ndef example_function():\n    return 'Hello, World!'\n```\n\n–≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏.",
        "–î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥:\n\n1. –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n3. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å—Ç—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥",
        "```javascript\n// –ü—Ä–∏–º–µ—Ä –Ω–∞ JavaScript:\nconst solution = (input) => {\n    return input.map(item => item * 2);\n};\n```",
      ],
      creative: [
        "–ö–∞–∫–∞—è –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –∏–¥–µ—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ —Ä–∞–∑–≤–∏—Ç—å —ç—Ç—É —Ç–µ–º—É –¥–∞–ª—å—à–µ...",
        "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ - —ç—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫–∞. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ...",
      ],
      analysis: [
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —è –≤–∏–∂—É —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n\nüìä **–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã:**\n‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —á–µ—Ç–∫—É—é —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é\n‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
        "–ë–∞–∑–∏—Ä—É—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–≤–æ–¥—ã:\n\nüîç **–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç:**\n‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞\n‚Ä¢ –ï—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è\n‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
      ]
    };

    const modeResponses = responses[currentMode] || responses.general;
    const randomResponse = modeResponses[Math.floor(Math.random() * modeResponses.length)];
    
    return randomResponse;
  };

  const handleSendMessage = async (content) => {
    if (!content.trim()) return;

    const userMessage = {
      role: "user",
      content,
      timestamp: new Date().toISOString(),
      mode: currentMode
    };

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!conversationId) {
      try {
        const newConversation = await conversationService.create({
          title: content.length > 50 ? content.substring(0, 50) + "..." : content,
          messages: [userMessage],
          mode: currentMode
        });
        
        onTitleUpdate?.(newConversation.Id, newConversation.title);
        setMessages([userMessage]);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
        setIsTyping(true);
        setTimeout(async () => {
          const aiResponse = await generateAIResponse(content);
          const assistantMessage = {
            role: "assistant",
            content: aiResponse,
            timestamp: new Date().toISOString(),
            mode: currentMode
          };
          
          await conversationService.addMessage(newConversation.Id, assistantMessage);
          setMessages(prev => [...prev, assistantMessage]);
          setIsTyping(false);
        }, 1500);
        
      } catch (err) {
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥");
        setIsTyping(false);
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥
      try {
        await conversationService.addMessage(conversationId, userMessage);
        setMessages(prev => [...prev, userMessage]);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç AI
        setIsTyping(true);
        setTimeout(async () => {
          const aiResponse = await generateAIResponse(content);
          const assistantMessage = {
            role: "assistant",
            content: aiResponse,
            timestamp: new Date().toISOString(),
            mode: currentMode
          };
          
          await conversationService.addMessage(conversationId, assistantMessage);
          setMessages(prev => [...prev, assistantMessage]);
          setIsTyping(false);
        }, 1500);
        
      } catch (err) {
        toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
        setIsTyping(false);
      }
    }
  };

  const handleCopyMessage = (content) => {
    navigator.clipboard.writeText(content);
    toast.success("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ");
  };

  const formatMessageContent = (content) => {
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ markdown –¥–ª—è –∫–æ–¥–∞
    const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
    const inlineCodeRegex = /`([^`]+)`/g;
    
    let formattedContent = content;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
    formattedContent = formattedContent.replace(codeBlockRegex, (match, language, code) => {
      return `<div class="code-block my-4"><pre><code>${code.trim()}</code></pre></div>`;
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–æ–¥–∞
    formattedContent = formattedContent.replace(inlineCodeRegex, '<code class="px-1 py-0.5 bg-gray-100 rounded text-sm">$1</code>');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ bold —Ç–µ–∫—Å—Ç–∞
    formattedContent = formattedContent.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
    formattedContent = formattedContent.replace(/^‚Ä¢ (.*$)/gim, '<li class="ml-4">‚Ä¢ $1</li>');
    
    return formattedContent;
  };

  if (loading) {
    return (
      <div className={`flex flex-col h-full ${className}`}>
        <div className="flex-1 p-6">
          <Loading type="conversation" />
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={`flex flex-col h-full ${className}`}>
        <div className="flex-1 flex items-center justify-center">
          <Error message={error} onRetry={loadConversation} />
        </div>
      </div>
    );
  }

  return (
    <div className={`flex flex-col h-full bg-gray-50 ${className}`}>
      {/* Messages Area */}
      <div className="flex-1 overflow-y-auto p-6">
        {messages.length === 0 ? (
          <Empty
            title="–ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥"
            description="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å AI"
            icon="MessageSquare"
            className="h-full"
          />
        ) : (
          <div className="max-w-4xl mx-auto space-y-6">
            <AnimatePresence>
              {messages.map((message, index) => (
                <motion.div
                  key={message.id || index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                  className={`flex gap-4 ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  {message.role === 'assistant' && (
                    <Avatar type="assistant" size="md" />
                  )}
                  
                  <div className={`max-w-3xl ${message.role === 'user' ? 'order-first' : ''}`}>
                    <div className={`
                      p-4 rounded-2xl shadow-sm
                      ${message.role === 'user' 
                        ? 'bg-gradient-to-r from-primary to-purple-600 text-white ml-12' 
                        : 'bg-white border border-gray-200'
                      }
                    `}>
                      <div 
                        dangerouslySetInnerHTML={{ 
                          __html: formatMessageContent(message.content) 
                        }}
                        className={`prose prose-sm max-w-none ${
                          message.role === 'user' ? 'prose-invert' : ''
                        }`}
                      />
                    </div>
                    
                    <div className="flex items-center gap-2 mt-2 text-xs text-gray-500">
                      <span>
                        {format(new Date(message.timestamp), 'HH:mm', { locale: ru })}
                      </span>
                      
                      {message.role === 'assistant' && (
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handleCopyMessage(message.content)}
                          className="p-1 hover:text-gray-700 transition-colors"
                          title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
                        >
                          <ApperIcon name="Copy" size={14} />
                        </motion.button>
                      )}
                    </div>
                  </div>
                  
                  {message.role === 'user' && (
                    <Avatar type="user" size="md" />
                  )}
                </motion.div>
              ))}
            </AnimatePresence>
            
            {/* Typing Indicator */}
            {isTyping && (
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="flex gap-4"
              >
                <Avatar type="assistant" size="md" />
                <div className="bg-white border border-gray-200 rounded-2xl p-4 shadow-sm">
                  <Loading type="message" />
                </div>
              </motion.div>
            )}
            
            <div ref={messagesEndRef} />
          </div>
        )}
      </div>

      {/* Message Input */}
      <MessageInput
        onSendMessage={handleSendMessage}
        disabled={isTyping}
        placeholder={`–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ "${currentMode === 'general' ? '–û–±—â–∏–π —á–∞—Ç' : currentMode === 'coding' ? '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ' : currentMode === 'creative' ? '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ' : '–ê–Ω–∞–ª–∏–∑'}"...`}
      />
    </div>
  );
};

export default ChatInterface;